<map id="UtilsObject" name="UtilsObject">
<area shape="rect" id="node1" title="UtilsObject单独继承CObject，run()标记为CGRAPH_NO_SUPPORT." alt="" coords="127,354,221,381"/>
<area shape="rect" id="node3" href="$class_u_serial_unique_array.html" title=" " alt="" coords="311,5,461,47"/>
<area shape="rect" id="node4" href="$class_u_singleton.html" title=" " alt="" coords="269,71,503,127"/>
<area shape="rect" id="node5" href="$class_u_small_vector.html" title=" " alt="" coords="279,151,493,178"/>
<area shape="rect" id="node6" href="$class_u_distance_object.html" title="UDistanceObject = UtilsObject." alt="" coords="321,202,451,229"/>
<area shape="rect" id="node12" href="$class_u_lru.html" title="LRU(Least Recently Used)，基于双链表(list)存储 最少被使用的结点放在表尾，最近/最多被使用的结点放在表头" alt="" coords="275,253,497,279"/>
<area shape="rect" id="node13" href="$struct_u_lru_node.html" title="ULru双链表nodes_存储的结点类型" alt="" coords="315,303,457,330"/>
<area shape="rect" id="node14" href="$class_u_random.html" title="随机数生成类，支持模板入参T(默认CFloat)、SEED(0为完全随机值，其他为固定随机值)、 TEngine为随机数的生成方式(梅森旋转法/线性同余法/滞后Fibonacci/...." alt="" coords="273,354,499,381"/>
<area shape="rect" id="node15" href="$class_u_serial_unique_array.html" title="内部基于std::vector存储，每次插入前进行检查，重复则不插入(uniqueAdd)，保证对外表现为一个不重复数组" alt="" coords="292,405,480,431"/>
<area shape="rect" id="node16" href="$class_u_singleton.html" title="支持默认构造一个T类型的对象、封装成单例使用 目前实际上只支持CObject及其派生类作为单例要维护的对象类型，其他类型在init/destroy阶段啥都不做" alt="" coords="307,456,465,497"/>
<area shape="rect" id="node17" href="$class_u_small_vector.html" title="申请一块T类型的内存，封装为一个轻量级的std::vector使用 (主要为了减少内存占用?)， 内部的迭代器也使用自定义的UIter" alt="" coords="277,522,495,549"/>
<area shape="rect" id="node18" href="$class_u_thread_object.html" title="UThreadObject = UtilsObject，将run置为CGRAPH_NO_SUPPORT." alt="" coords="327,573,445,599"/>
<area shape="rect" id="node37" href="$class_u_time_counter.html" title="基于std::chrono::steady_clock::time_point封装的计时器； 构造的同时记录时间戳，析构的同时打印从构造到析构的间隔span" alt="" coords="328,623,444,650"/>
<area shape="rect" id="node38" href="$class_u_timer.html" title="定周期执行任务的定时器，不需要在初始化的时候传入任务，只需要start的时候传入即可； start还可以指定定时器的执行周期interval、每次task执行完成后可以更改下一次执行周期的modify接..." alt="" coords="351,674,421,701"/>
<area shape="rect" id="node2" href="$class_c_object.html" title=" " alt="" coords="5,354,79,381"/>
<area shape="rect" id="node7" href="$class_u_distance.html" title=" " alt="" coords="553,119,735,146"/>
<area shape="rect" id="node10" href="$class_u_distance.html" title="距离计算类的基类，提供calc(计算向量距离)、check(检查向量)、normalize(向量归一化)三个虚函数 其中calc是纯虚函数，派生类必须重写" alt="" coords="551,177,737,203"/>
<area shape="rect" id="node11" href="$class_u_distance_calculator.html" title="对UDistance及其派生类UDist的进一步封装 UDist本身也是模板参数，通过另一个模板参数needCheck指定在calc之前是否要check" alt="" coords="567,227,721,283"/>
<area shape="rect" id="node8" href="$class_u_cosine_distance.html" title="计算v1和v2两个向量的cos距离 默认v1和v2的维度相同(dim1 == dim2)且非零 (此处calc实现未做检查，可能出现除零错误)" alt="" coords="827,47,1007,88"/>
<area shape="rect" id="node9" href="$class_u_euclidean_distance.html" title="计算几何距离(欧氏距离)" alt="" coords="824,112,1011,153"/>
<area shape="rect" id="node19" href="$struct_u_cv_mutex.html" title=" " alt="" coords="599,434,689,461"/>
<area shape="rect" id="node20" href="$class_u_queue_object.html" title="UQueueObject单独继承UThreadObject，只在此基础上新增了mutex_和cv_成员" alt="" coords="586,485,702,511"/>
<area shape="rect" id="node30" href="$class_u_semaphore.html" title="基于mutex_/cv_和int计数器cnt_封装的信号量" alt="" coords="591,535,697,562"/>
<area shape="rect" id="node31" href="$class_u_spin_lock.html" title="基于std::atomic_flag实现的用户态自旋锁，std::atomic_flag只有true/false两种状态； USpinLock提供以下三个方法：lock为忙等，tryLock为单次尝试，..." alt="" coords="599,586,689,613"/>
<area shape="rect" id="node32" href="$class_u_task_group.html" title="注意，并非基于UTask，实际维护的是CGRAPH_DEFAULT_FUNCTION类型的函数数组(std::vector) 支持addTask将更多的函数加入task_arr_数组，支持指定任务组最大..." alt="" coords="594,637,694,663"/>
<area shape="rect" id="node33" href="$class_u_thread_base.html" title="线程池中实际使用的线程的基类，有以下关键成员： UAtomicQueue&lt;UTask&gt;* pool_task_queue_：存储当前线程待执行的普通任务； UAtomicPriorityQueue&lt;UT..." alt="" coords="589,710,699,737"/>
<area shape="rect" id="node36" href="$class_u_thread_pool.html" title="线程池，包含主线程池、辅助线程池、普通任务队列、优先级任务队列、线程池配置、监控线程等" alt="" coords="591,761,697,787"/>
<area shape="rect" id="node21" href="$class_u_atomic_priority_queue.html" title=" " alt="" coords="834,177,1001,219"/>
<area shape="rect" id="node22" href="$class_u_atomic_queue.html" title=" " alt="" coords="823,243,1012,270"/>
<area shape="rect" id="node23" href="$class_u_atomic_ring_buffer_queue.html" title=" " alt="" coords="785,294,1049,350"/>
<area shape="rect" id="node24" href="$class_u_work_stealing_queue.html" title=" " alt="" coords="837,375,997,416"/>
<area shape="rect" id="node25" href="$class_u_atomic_priority_queue.html" title="包含一个优先级队列成员，基于mutex_封装成一个原子的优先级队列，支持原子的tryPop/push/empty" alt="" coords="815,441,1020,467"/>
<area shape="rect" id="node26" href="$class_u_atomic_queue.html" title="包含一个普通队列成员，基于mutex_封装成一个原子的优先级队列， 支持原子的waitPop/tryPop/popWithTimeout/push/empty 新增ready_flag_用于通知辅助线程..." alt="" coords="838,491,997,518"/>
<area shape="rect" id="node27" href="$class_u_atomic_ring_buffer_queue.html" title="包含一个基于std::vector的环形队列，基于mutex_实现原子的waitPopWithTimeout/push head_/tail_初始化为0，tail_及tail_之后一直到head_之前的..." alt="" coords="823,543,1011,584"/>
<area shape="rect" id="node28" href="$class_u_lock_free_ring_buffer_queue.html" title="环形队列基于std::vector存储，head_和tail_通过std::atomic封装 号称是无锁的，但是从代码看起来push/tryPop操作并不能解决多线程的竞态条件问题，线程安全性存疑？" alt="" coords="817,608,1017,649"/>
<area shape="rect" id="node29" href="$class_u_work_stealing_queue.html" title="工作窃取队列，实现为双端队列(deque_)； push在队尾发生，可以一次性写入一个或多个任务，也支持tryPush和带锁的push； pop在队头发生，可以一次性拿出一个或多个任务，也支持tryPo..." alt="" coords="818,674,1017,701"/>
<area shape="rect" id="node34" href="$class_u_thread_primary.html" title="主线程类，核心成员是primary_queue_和secondary_queue_ 自身准备执行任务时，优先从primary_queue_取，其次从secondary_queue_取 自身准备窃取任务时..." alt="" coords="853,725,981,751"/>
<area shape="rect" id="node35" href="$class_u_thread_secondary.html" title="和主线程UThreadPrimary不同，辅助线程没有第一第二任务队列的概念，因为辅助线程不允许窃取， 而是直接从普通任务队列(pool_task_queue_)和优先级任务队列(pool_priori..." alt="" coords="845,775,990,802"/>
</map>
