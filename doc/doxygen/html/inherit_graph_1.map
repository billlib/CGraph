<map id="Graphical Class Hierarchy" name="Graphical Class Hierarchy">
<area shape="rect" id="node1" href="$class_c_desc_info.html" title=" " alt="" coords="189,1348,277,1375"/>
<area shape="rect" id="node2" href="$class_g_aspect_object.html" title="在GraphObject和CDescInfo的基础上新增私有成员param_manager_/event_manager_/param_/belong_ param_manager_/event_man..." alt="" coords="445,1449,564,1476"/>
<area shape="rect" id="node9" href="$class_g_daemon_object.html" title="在GraphObject和CDescInfo的基础上新增私有成员param_manager_/event_manager_/param_/interval_ param_manager_/event_m..." alt="" coords="440,1196,569,1223"/>
<area shape="rect" id="node14" href="$class_g_element.html" title="CGraph所有广义&quot;结点&quot;的基类，可派生出GNode/GGroup/GAdapter类 public: 提供addGAspect加入切面/addDependGElement加入前序依赖/removeD..." alt="" coords="730,1297,817,1324"/>
<area shape="rect" id="node40" href="$class_g_event_object.html" title=" " alt="" coords="449,1348,560,1375"/>
<area shape="rect" id="node44" href="$class_g_pipeline.html" title=" " alt="" coords="731,2007,815,2033"/>
<area shape="rect" id="node3" href="$class_g_aspect.html" title=" " alt="" coords="735,1449,811,1476"/>
<area shape="rect" id="node8" href="$class_g_aspect_manager.html" title=" " alt="" coords="707,1399,840,1425"/>
<area shape="rect" id="node4" href="$class_g_template_aspect.html" title=" " alt="" coords="967,1501,1147,1542"/>
<area shape="rect" id="node6" href="$class_g_template_aspect.html" title="GTemplateAspect(空) = GAspect，但是实现成模板类，可以自己用模板参数加以实现" alt="" coords="960,1399,1155,1425"/>
<area shape="rect" id="node7" href="$class_switch_g_aspect.html" title=" " alt="" coords="998,1449,1117,1476"/>
<area shape="rect" id="node5" href="$class_g_perf_aspect.html" title="预先写好的用于做性能分析的切面" alt="" coords="1250,1753,1411,1780"/>
<area shape="rect" id="node10" href="$class_g_daemon.html" title=" " alt="" coords="730,1196,817,1223"/>
<area shape="rect" id="node13" href="$class_g_daemon_manager.html" title="维护GDaemon实例的集合daemons_ 支持批量init/批量destroy，在daemons_里面add/destroy或者清空daemons_等" alt="" coords="701,1145,845,1172"/>
<area shape="rect" id="node11" href="$class_camera_g_daemon.html" title=" " alt="" coords="988,841,1127,868"/>
<area shape="rect" id="node12" href="$class_g_template_daemon.html" title="GTemplateDaemon(空) = GDaemon，但是实现成模板类，可以自己用模板参数加以实现" alt="" coords="954,791,1161,817"/>
<area shape="rect" id="node15" href="$class_g_adapter.html" title=" " alt="" coords="1016,892,1099,919"/>
<area shape="rect" id="node20" href="$class_g_group.html" title="所有节点组合的基类，所有节点组合功能，均继承自此类" alt="" coords="1022,1019,1093,1045"/>
<area shape="rect" id="node27" href="$class_g_node.html" title="功能运行的最小单元(结点)" alt="" coords="1024,1297,1091,1324"/>
<area shape="rect" id="node16" href="$class_g_coordinator.html" title=" " alt="" coords="1247,791,1414,817"/>
<area shape="rect" id="node17" href="$class_g_fence.html" title="默认的前序后继方式只能等待有连接关系的结点 GFence用于在没有依赖关系的情况下，强行等待一个或一组异步结点的运行结束" alt="" coords="1295,841,1366,868"/>
<area shape="rect" id="node18" href="$class_g_function.html" title="将一个函数注入成一个GElement，函数可以注入为这个新的GElement的init/run/destroy" alt="" coords="1287,689,1374,716"/>
<area shape="rect" id="node19" href="$class_g_singleton.html" title="GAdapter的派生类，核心成员是static USingleton&lt;T&gt; s_singleton单例，可以方便地作为单例GElement使用" alt="" coords="1265,740,1396,767"/>
<area shape="rect" id="node21" href="$class_g_cluster.html" title=" " alt="" coords="1291,993,1370,1020"/>
<area shape="rect" id="node22" href="$class_g_condition.html" title=" " alt="" coords="1283,1044,1378,1071"/>
<area shape="rect" id="node24" href="$class_g_mutable.html" title="常规的GGroup及其派生类在运行时是不允许再修改前序后继关系的，但是GMutable可以 具体做法是GMutable在每次run的时候会先调用setup初始化自己这张子图(实际上就是清空)，再调用re..." alt="" coords="1288,1095,1373,1121"/>
<area shape="rect" id="node25" href="$class_g_region.html" title="多个Element的集合，一般非纯并行、也非纯串行(Gluster)时使用" alt="" coords="1292,892,1369,919"/>
<area shape="rect" id="node26" href="$class_g_some.html" title="对于插入的所有GElement，不管实际能不能并行，GSome都会把这些GElement提交到异步任务里面全并发执行(详见run) TriggerNum个GElement执行完成后就退出不再执行剩余的，..." alt="" coords="1243,943,1418,969"/>
<area shape="rect" id="node23" href="$class_g_multi_condition.html" title=" " alt="" coords="1472,1044,1659,1071"/>
<area shape="rect" id="node28" href="$class_action_g_node.html" title=" " alt="" coords="1277,1145,1384,1172"/>
<area shape="rect" id="node29" href="$class_car_detector_g_node.html" title=" " alt="" coords="1259,1196,1403,1223"/>
<area shape="rect" id="node30" href="$class_d_ann_node.html" title="ANN领域算子模型抽象，说人话，就是抽象了一套跑NN相关的范式 prepareParam准备要接下来要run的函数类型 函数类型和DAnnNode的成员函数一一对应，分别有 train/search/i..." alt="" coords="1285,1703,1376,1729"/>
<area shape="rect" id="node31" href="$class_g_template_node.html" title="GTemplateNode(空) = GNode，但是实现成模板类，可以自己用模板参数加以实现" alt="" coords="1238,1247,1423,1273"/>
<area shape="rect" id="node32" href="$class_generate_g_node.html" title=" " alt="" coords="1267,1297,1394,1324"/>
<area shape="rect" id="node33" href="$class_input_g_node.html" title=" " alt="" coords="1281,1348,1380,1375"/>
<area shape="rect" id="node34" href="$class_lane_detector_g_node.html" title=" " alt="" coords="1254,1399,1407,1425"/>
<area shape="rect" id="node35" href="$class_map_g_node.html" title=" " alt="" coords="1237,1449,1424,1476"/>
<area shape="rect" id="node36" href="$class_process_g_node.html" title=" " alt="" coords="1273,1500,1389,1527"/>
<area shape="rect" id="node37" href="$class_reduce_g_node.html" title=" " alt="" coords="1273,1551,1388,1577"/>
<area shape="rect" id="node38" href="$class_result_g_node.html" title=" " alt="" coords="1277,1601,1384,1628"/>
<area shape="rect" id="node39" href="$class_show_g_node.html" title=" " alt="" coords="1280,1652,1381,1679"/>
<area shape="rect" id="node41" href="$class_g_event.html" title="事件机制，addGEvent将事件注册到pipeline notify触发，process处理信号，trigger同步执行，asyncProcess异步执行，asyncWait等待异步任务结束" alt="" coords="739,1348,808,1375"/>
<area shape="rect" id="node43" href="$class_g_event_manager.html" title=" " alt="" coords="710,1247,837,1273"/>
<area shape="rect" id="node42" href="$class_show_g_event.html" title=" " alt="" coords="1005,1348,1109,1375"/>
<area shape="rect" id="node45" href="$class_c_object.html" title=" " alt="" coords="5,1659,79,1685"/>
<area shape="rect" id="node46" href="$class_graph_manager.html" title=" " alt="" coords="136,1684,331,1711"/>
<area shape="rect" id="node48" href="$class_graph_manager.html" title=" " alt="" coords="127,1563,339,1589"/>
<area shape="rect" id="node50" href="$class_graph_manager.html" title=" " alt="" coords="136,1272,331,1299"/>
<area shape="rect" id="node51" href="$class_graph_manager.html" title=" " alt="" coords="127,1183,340,1209"/>
<area shape="rect" id="node52" href="$class_graph_manager.html" title=" " alt="" coords="134,2047,333,2073"/>
<area shape="rect" id="node54" href="$class_graph_manager.html" title=" " alt="" coords="133,1735,334,1777"/>
<area shape="rect" id="node56" href="$class_graph_manager.html" title=" " alt="" coords="132,1436,335,1463"/>
<area shape="rect" id="node57" href="$class_graph_manager.html" title=" " alt="" coords="128,1852,339,1879"/>
<area shape="rect" id="node59" href="$class_domain_object.html" title="DAnnObject = CObject." alt="" coords="176,1633,291,1660"/>
<area shape="rect" id="node62" href="$class_graph_manager.html" title="所有以GraphObject为基类的对象（GAsepct/GDaemon/GEvent/GElement/GPipeline/GParam）的管理器的基类" alt="" coords="153,1903,313,1929"/>
<area shape="rect" id="node63" href="$class_graph_object.html" title="GraphObject = CObject，没有新增或删除任何成员" alt="" coords="182,1801,285,1828"/>
<area shape="rect" id="node94" href="$class_utils_object.html" title="UtilsObject单独继承CObject，run()标记为CGRAPH_NO_SUPPORT." alt="" coords="186,579,281,605"/>
<area shape="rect" id="node47" href="$class_g_stage_manager.html" title=" " alt="" coords="710,1753,837,1780"/>
<area shape="rect" id="node49" href="$class_g_element_manager.html" title=" " alt="" coords="702,1500,845,1527"/>
<area shape="rect" id="node53" href="$class_g_param_manager.html" title=" " alt="" coords="708,2159,839,2185"/>
<area shape="rect" id="node55" href="$class_g_message_manager.html" title="基于topic，支持send/recv(一发一收)，也支持pub/sub(一发多收) sub端每次订阅特定的topic之前都要先bindTopic生成一个唯一的conn_id_，实际上是绑定到这个con..." alt="" coords="679,1855,868,1881"/>
<area shape="rect" id="node58" href="$class_g_pipeline_manager.html" title=" " alt="" coords="703,2108,844,2135"/>
<area shape="rect" id="node60" href="$class_d_ann_object.html" title="DAnnObject = DomainObject, run设置为CGRAPH_NO_SUPPORT." alt="" coords="724,1703,823,1729"/>
<area shape="rect" id="node61" href="$struct_d_ann_param.html" title=" " alt="" coords="1008,2235,1107,2261"/>
<area shape="rect" id="node64" href="$class_g_element_object.html" title="GElementObject = GraphObject = CObject，没有新增或删除任何成员" alt="" coords="441,1589,569,1616"/>
<area shape="rect" id="node74" href="$class_g_message_object.html" title="GMessageObject在继承GraphObject的基础上删除了run函数 (GraphObject = CObject)" alt="" coords="439,1855,571,1881"/>
<area shape="rect" id="node77" href="$class_g_param_object.html" title=" " alt="" coords="447,2209,562,2236"/>
<area shape="rect" id="node88" href="$class_g_perf.html" title="pipeline性能分析，具体做法是通过inject注入统计性能的切面，然后运行pipeline， 接着输出最长路径和整个pipeline的可视化，最后通过recover删除切面恢复原来的pipelin..." alt="" coords="475,1956,534,1983"/>
<area shape="rect" id="node89" href="$class_g_pipeline_object.html" title=" " alt="" coords="441,2007,568,2033"/>
<area shape="rect" id="node91" href="$class_g_schedule.html" title=" " alt="" coords="459,2057,550,2084"/>
<area shape="rect" id="node92" href="$class_g_stage_object.html" title=" " alt="" coords="449,1753,560,1780"/>
<area shape="rect" id="node65" href="$class_g_element_repository.html" title=" " alt="" coords="695,1601,851,1628"/>
<area shape="rect" id="node66" href="$class_g_engine.html" title="CGraph的核心引擎，提供setup/link/getTopo/isDag等核心能力" alt="" coords="735,1551,811,1577"/>
<area shape="rect" id="node70" href="$class_g_optimizer.html" title="GOptimizer是用来干嘛的?" alt="" coords="725,1652,821,1679"/>
<area shape="rect" id="node67" href="$class_g_dynamic_engine.html" title="CGraph的核心引擎，提供DAG类型分析、拓扑分析、动态图运行、全并发执行、全串行执行等能力" alt="" coords="990,1567,1125,1593"/>
<area shape="rect" id="node68" href="$class_g_static_engine.html" title="将待执行的图中的所有结点进行拓扑排序(setup)，排序结果存储在element_mat_； 然后将element_mat_各个拓扑排序好的结点提交到微线程或者线程池，等待执行完成获取结果(run)" alt="" coords="1001,1617,1114,1644"/>
<area shape="rect" id="node69" href="$class_g_topo_engine.html" title="拓扑排序，并按照拓扑排序的顺序串行执行" alt="" coords="1004,1668,1111,1695"/>
<area shape="rect" id="node71" href="$class_g_max_para_optimizer.html" title=" " alt="" coords="981,1719,1133,1745"/>
<area shape="rect" id="node72" href="$class_g_separate_optimizer.html" title="判断两个element是否可以独立运行" alt="" coords="980,1769,1135,1796"/>
<area shape="rect" id="node73" href="$class_g_trim_optimizer.html" title=" " alt="" coords="995,1820,1119,1847"/>
<area shape="rect" id="node75" href="$class_g_message.html" title="基于UAtomicRingBufferQueue队列实现，支持send/recv" alt="" coords="676,1905,871,1932"/>
<area shape="rect" id="node76" href="$class_g_message_manager_singleton.html" title="默认的GMessageObject使用的参数类型是GMessageParam，是全局参数，用单例管理更合适" alt="" coords="669,1956,877,1983"/>
<area shape="rect" id="node78" href="$class_g_message_param.html" title="GMessageParam作用域为进程，GParam作用域为图(piepline) GPassedParam作用域为结点(GElement/GDaemon/GAspect/GEvent)" alt="" coords="708,2209,839,2236"/>
<area shape="rect" id="node82" href="$class_g_param.html" title=" " alt="" coords="737,2285,810,2312"/>
<area shape="rect" id="node86" href="$class_g_passed_param.html" title=" " alt="" coords="714,2387,833,2413"/>
<area shape="rect" id="node79" href="$struct_image_m_param.html" title=" " alt="" coords="999,2083,1115,2109"/>
<area shape="rect" id="node80" href="$struct_input_m_param.html" title=" " alt="" coords="1003,2133,1111,2160"/>
<area shape="rect" id="node81" href="$struct_result_m_param.html" title=" " alt="" coords="999,2184,1115,2211"/>
<area shape="rect" id="node83" href="$struct_detect_result_g_param.html" title=" " alt="" coords="979,2285,1136,2312"/>
<area shape="rect" id="node84" href="$struct_nums_g_param.html" title=" " alt="" coords="1002,2336,1113,2363"/>
<area shape="rect" id="node85" href="$struct_process_g_param.html" title=" " alt="" coords="996,2387,1119,2413"/>
<area shape="rect" id="node87" href="$class_g_passed_default_param.html" title=" " alt="" coords="974,2437,1141,2464"/>
<area shape="rect" id="node90" href="$class_g_pipeline_factory.html" title=" " alt="" coords="708,2057,839,2084"/>
<area shape="rect" id="node93" href="$class_g_stage.html" title=" " alt="" coords="739,1804,808,1831"/>
<area shape="rect" id="node95" href="$class_u_serial_unique_array.html" title=" " alt="" coords="429,655,580,697"/>
<area shape="rect" id="node96" href="$class_u_singleton.html" title=" " alt="" coords="388,721,621,777"/>
<area shape="rect" id="node97" href="$class_u_small_vector.html" title=" " alt="" coords="397,801,612,828"/>
<area shape="rect" id="node98" href="$class_u_distance_object.html" title="UDistanceObject = UtilsObject." alt="" coords="439,852,570,879"/>
<area shape="rect" id="node104" href="$class_u_lru.html" title="LRU(Least Recently Used)，基于双链表(list)存储 最少被使用的结点放在表尾，最近/最多被使用的结点放在表头" alt="" coords="394,903,615,929"/>
<area shape="rect" id="node105" href="$struct_u_lru_node.html" title="ULru双链表nodes_存储的结点类型" alt="" coords="433,233,576,260"/>
<area shape="rect" id="node106" href="$class_u_random.html" title="随机数生成类，支持模板入参T(默认CFloat)、SEED(0为完全随机值，其他为固定随机值)、 TEngine为随机数的生成方式(梅森旋转法/线性同余法/滞后Fibonacci/...." alt="" coords="391,284,618,311"/>
<area shape="rect" id="node107" href="$class_u_serial_unique_array.html" title="内部基于std::vector存储，每次插入前进行检查，重复则不插入(uniqueAdd)，保证对外表现为一个不重复数组" alt="" coords="411,335,599,361"/>
<area shape="rect" id="node108" href="$class_u_singleton.html" title="支持默认构造一个T类型的对象、封装成单例使用 目前实际上只支持CObject及其派生类作为单例要维护的对象类型，其他类型在init/destroy阶段啥都不做" alt="" coords="426,386,583,427"/>
<area shape="rect" id="node109" href="$class_u_small_vector.html" title="申请一块T类型的内存，封装为一个轻量级的std::vector使用 (主要为了减少内存占用?)， 内部的迭代器也使用自定义的UIter" alt="" coords="395,452,614,479"/>
<area shape="rect" id="node110" href="$class_u_thread_object.html" title="UThreadObject = UtilsObject，将run置为CGRAPH_NO_SUPPORT." alt="" coords="445,503,564,529"/>
<area shape="rect" id="node129" href="$class_u_time_counter.html" title="基于std::chrono::steady_clock::time_point封装的计时器； 构造的同时记录时间戳，析构的同时打印从构造到析构的间隔span" alt="" coords="447,553,563,580"/>
<area shape="rect" id="node130" href="$class_u_timer.html" title="定周期执行任务的定时器，不需要在初始化的时候传入任务，只需要start的时候传入即可； start还可以指定定时器的执行周期interval、每次task执行完成后可以更改下一次执行周期的modify接..." alt="" coords="469,604,540,631"/>
<area shape="rect" id="node99" href="$class_u_distance.html" title=" " alt="" coords="682,732,865,759"/>
<area shape="rect" id="node102" href="$class_u_distance.html" title="距离计算类的基类，提供calc(计算向量距离)、check(检查向量)、normalize(向量归一化)三个虚函数 其中calc是纯虚函数，派生类必须重写" alt="" coords="680,819,867,845"/>
<area shape="rect" id="node103" href="$class_u_distance_calculator.html" title="对UDistance及其派生类UDist的进一步封装 UDist本身也是模板参数，通过另一个模板参数needCheck指定在calc之前是否要check" alt="" coords="696,869,851,925"/>
<area shape="rect" id="node100" href="$class_u_cosine_distance.html" title="计算v1和v2两个向量的cos距离 默认v1和v2的维度相同(dim1 == dim2)且非零 (此处calc实现未做检查，可能出现除零错误)" alt="" coords="967,659,1147,701"/>
<area shape="rect" id="node101" href="$class_u_euclidean_distance.html" title="计算几何距离(欧氏距离)" alt="" coords="964,725,1151,766"/>
<area shape="rect" id="node111" href="$struct_u_cv_mutex.html" title=" " alt="" coords="728,655,819,681"/>
<area shape="rect" id="node112" href="$class_u_queue_object.html" title="UQueueObject单独继承UThreadObject，只在此基础上新增了mutex_和cv_成员" alt="" coords="715,291,831,317"/>
<area shape="rect" id="node122" href="$class_u_semaphore.html" title="基于mutex_/cv_和int计数器cnt_封装的信号量" alt="" coords="720,401,827,428"/>
<area shape="rect" id="node123" href="$class_u_spin_lock.html" title="基于std::atomic_flag实现的用户态自旋锁，std::atomic_flag只有true/false两种状态； USpinLock提供以下三个方法：lock为忙等，tryLock为单次尝试，..." alt="" coords="728,452,819,479"/>
<area shape="rect" id="node124" href="$class_u_task_group.html" title="注意，并非基于UTask，实际维护的是CGRAPH_DEFAULT_FUNCTION类型的函数数组(std::vector) 支持addTask将更多的函数加入task_arr_数组，支持指定任务组最大..." alt="" coords="723,503,823,529"/>
<area shape="rect" id="node125" href="$class_u_thread_base.html" title="线程池中实际使用的线程的基类，有以下关键成员： UAtomicQueue&lt;UTask&gt;* pool_task_queue_：存储当前线程待执行的普通任务； UAtomicPriorityQueue&lt;UT..." alt="" coords="719,553,828,580"/>
<area shape="rect" id="node128" href="$class_u_thread_pool.html" title="线程池，包含主线程池、辅助线程池、普通任务队列、优先级任务队列、线程池配置、监控线程等" alt="" coords="721,604,826,631"/>
<area shape="rect" id="node113" href="$class_u_atomic_priority_queue.html" title=" " alt="" coords="974,57,1141,98"/>
<area shape="rect" id="node114" href="$class_u_atomic_queue.html" title=" " alt="" coords="963,123,1152,149"/>
<area shape="rect" id="node115" href="$class_u_atomic_ring_buffer_queue.html" title=" " alt="" coords="925,173,1189,229"/>
<area shape="rect" id="node116" href="$class_u_work_stealing_queue.html" title=" " alt="" coords="977,254,1137,295"/>
<area shape="rect" id="node117" href="$class_u_atomic_priority_queue.html" title="包含一个优先级队列成员，基于mutex_封装成一个原子的优先级队列，支持原子的tryPop/push/empty" alt="" coords="955,320,1160,347"/>
<area shape="rect" id="node118" href="$class_u_atomic_queue.html" title="包含一个普通队列成员，基于mutex_封装成一个原子的优先级队列， 支持原子的waitPop/tryPop/popWithTimeout/push/empty 新增ready_flag_用于通知辅助线程..." alt="" coords="978,371,1137,397"/>
<area shape="rect" id="node119" href="$class_u_atomic_ring_buffer_queue.html" title="包含一个基于std::vector的环形队列，基于mutex_实现原子的waitPopWithTimeout/push head_/tail_初始化为0，tail_及tail_之后一直到head_之前的..." alt="" coords="963,422,1151,463"/>
<area shape="rect" id="node120" href="$class_u_lock_free_ring_buffer_queue.html" title="环形队列基于std::vector存储，head_和tail_通过std::atomic封装 号称是无锁的，但是从代码看起来push/tryPop操作并不能解决多线程的竞态条件问题，线程安全性存疑？" alt="" coords="957,487,1157,529"/>
<area shape="rect" id="node121" href="$class_u_work_stealing_queue.html" title="工作窃取队列，实现为双端队列(deque_)； push在队尾发生，可以一次性写入一个或多个任务，也支持tryPush和带锁的push； pop在队头发生，可以一次性拿出一个或多个任务，也支持tryPo..." alt="" coords="958,5,1157,32"/>
<area shape="rect" id="node126" href="$class_u_thread_primary.html" title="主线程类，核心成员是primary_queue_和secondary_queue_ 自身准备执行任务时，优先从primary_queue_取，其次从secondary_queue_取 自身准备窃取任务时..." alt="" coords="993,604,1121,631"/>
<area shape="rect" id="node127" href="$class_u_thread_secondary.html" title="和主线程UThreadPrimary不同，辅助线程没有第一第二任务队列的概念，因为辅助线程不允许窃取， 而是直接从普通任务队列(pool_task_queue_)和优先级任务队列(pool_priori..." alt="" coords="985,553,1130,580"/>
</map>
